import os
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base
from dotenv import load_dotenv

# ============================================================
# ðŸ”¹ Carregar variÃ¡veis de ambiente (.env)
# ============================================================
load_dotenv()

# ============================================================
# ðŸ”¹ ConfiguraÃ§Ã£o do Banco de Dados (PostgreSQL assÃ­ncrono)
# ============================================================
DATABASE_URL = os.getenv(
    "DATABASE_URL",
    "postgresql+asyncpg://postgres:PuypxUfIHIxWXuTuIEIAGoGIFdYeUgpt@mainline.proxy.rlwy.net:16060/railway"
)

# Criar engine assÃ­ncrona
engine = create_async_engine(DATABASE_URL, echo=True, future=True)

# Criar fÃ¡brica de sessÃµes assÃ­ncronas
AsyncSessionLocal = sessionmaker(bind=engine, class_=AsyncSession, expire_on_commit=False)

# Base para os modelos ORM
Base = declarative_base()

# ============================================================
# ðŸ”¹ InicializaÃ§Ã£o do FastAPI
# ============================================================
app = FastAPI(
    title="ImperadorVIP API",
    version="1.0",
    description="ðŸš€ API para integraÃ§Ã£o do sistema ImperadorVIP em tempo real."
)

# Configurar CORS para permitir requisiÃ§Ãµes de apps externos
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# ============================================================
# ðŸ”¹ DependÃªncia de sessÃ£o de banco
# ============================================================
async def get_db():
    async with AsyncSessionLocal() as session:
        yield session

# ============================================================
# ðŸ”¹ Rotas principais
# ============================================================
@app.get("/")
async def root():
    return {"status": "âœ… API ImperadorVIP Online e Conectada!"}

@app.get("/health")
async def health_check():
    return {"ok": True, "db": str(engine.url)}

# ============================================================
# ðŸ”¹ Eventos de inicializaÃ§Ã£o e encerramento
# ============================================================
@app.on_event("startup")
async def startup_event():
    print("ðŸš€ Iniciando sistema e conectando ao banco de dados...")

@app.on_event("shutdown")
async def shutdown_event():
    print("ðŸ›‘ Encerrando servidor e fechando conexÃµes...")

# ============================================================
# ðŸ”¹ ExecuÃ§Ã£o local (modo debug)
# ============================================================
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8080, reload=True)

