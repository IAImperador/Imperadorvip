import os
import asyncio
import json
from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv

load_dotenv()

app = FastAPI()

# Configurações CORS
ALLOWED_ORIGINS = os.getenv("ALLOWED_ORIGINS", "*").split(",")
app.add_middleware(
    CORSMiddleware,
    allow_origins=ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

API_KEY = os.getenv("API_KEY", "default_api_key")
ENABLED_CONNECTORS = os.getenv("ENABLED_CONNECTORS", "IQ,DERIV,QUOTEX").split(",")

# ============================
# Conectores Simulados (Mock)
# ============================
async def connect_iq(websocket):
    while True:
        await asyncio.sleep(1)
        yield {"broker": "IQ Option", "status": "connected", "price": 1.1254}

async def connect_deriv(websocket):
    while True:
        await asyncio.sleep(1)
        yield {"broker": "Deriv", "status": "connected", "price": 1.1289}

async def connect_quotex(websocket):
    while True:
        await asyncio.sleep(1)
        yield {"broker": "Quotex", "status": "connected", "price": 1.1322}

# Dicionário de corretoras disponíveis
BROKER_FUNCTIONS = {
    "IQ": connect_iq,
    "DERIV": connect_deriv,
    "QUOTEX": connect_quotex
}

# =====================================
# Gerenciamento de conexões WebSockets
# =====================================
@app.websocket("/ws/{api_key}/{broker}")
async def websocket_endpoint(websocket: WebSocket, api_key: str, broker: str):
    if api_key != API_KEY:
        await websocket.close(code=4001)
        return

    broker = broker.upper()
    if broker not in BROKER_FUNCTIONS:
        await websocket.close(code=4002)
        return

    await websocket.accept()
    print(f"[INFO] Conexão WebSocket iniciada com {broker}")

    try:
        async for data in BROKER_FUNCTIONS[broker](websocket):
            await websocket.send_json(data)
    except WebSocketDisconnect:
        print(f"[INFO] WebSocket desconectado de {broker}")
        return
    except Exception as e:
        print(f"[ERRO] {e}")
        await websocket.close(code=4003)
        return

# =====================================
# IA de Análise com Confluências
# =====================================
@app.post("/analisar")
async def analisar_dados(payload: dict):
    # Exemplo de análise simulada
    simbolo = payload.get("simbolo", "USD/BRL")
    timeframe = payload.get("timeframe", "M1")
    estrategia = payload.get("estrategia", "confluencia_total")

    analise = {
        "ativo": simbolo,
        "timeframe": timeframe,
        "estrategia": estrategia,
        "indicadores": {
            "LTA/LTB": "confirmado",
            "Rompimento": "detectado",
            "Retração": "forte",
            "Canal de Alta": "ativo",
        },
        "sinal_final": "CALL",
        "confianca": "93%"
    }

    return {"resultado": analise, "status": "ok"}

# =====================================
# Health Check
# =====================================
@app.get("/")
async def root():
    return {"status": "online", "message": "IA ImperadorVIP ativa e rodando com sucesso."}

